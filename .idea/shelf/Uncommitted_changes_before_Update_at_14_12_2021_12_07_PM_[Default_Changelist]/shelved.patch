Index: app/src/main/java/com/example/gittest/DatabaseHelper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.gittest;\r\n\r\nimport android.content.ContentValues;\r\nimport android.content.Context;\r\nimport android.database.Cursor;\r\nimport android.database.sqlite.SQLiteDatabase;\r\nimport android.database.sqlite.SQLiteOpenHelper;\r\n\r\nimport java.text.DateFormat;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\n\r\n\r\npublic class DatabaseHelper extends SQLiteOpenHelper{\r\n    public static final String DATABASE_NAME = \"cotg.db\";\r\n    public static final String ACCOUNT_TABLE_NAME = \"account_table\";\r\n    public static final String PRODUCT_TABLE_NAME = \"products_table\";\r\n    public static final String CART_TABLE_NAME = \"cart_table\";\r\n    public static final String VENDOR_TABLE_NAME = \"vendor_table\";\r\n    public static final String ORDER_TABLE_NAME = \"order_table\";\r\n    public static final String CATEGORY_TABLE_NAME = \"category_table\";\r\n\r\n    public static final String ACCOUNT_COL_1 = \"ID\";\r\n    public static final String ACCOUNT_COL_2 = \"EMAIL\";\r\n    public static final String ACCOUNT_COL_3 = \"FIRSTNAME\";\r\n    public static final String ACCOUNT_COL_4 = \"MIDDLENAME\";\r\n    public static final String ACCOUNT_COL_5 = \"SURNAME\";\r\n    public static final String ACCOUNT_COL_6 = \"PASSWORD\";\r\n\r\n    public static final String PRODUCT_COL_1 = \"PROD_ID\";\r\n    public static final String PRODUCT_COL_2 = \"PROD_NAME\";\r\n    public static final String PRODUCT_COL_3 = \"PROD_DESC\";\r\n    public static final String PRODUCT_COL_4 = \"PROD_PRICE\";\r\n    public static final String PRODUCT_COL_5 = \"PROD_STOCK\";\r\n    public static final String PRODUCT_COL_6 = \"PROD_IMG\";\r\n    public static final String PRODUCT_COL_7 = \"PROD_CATEG\";\r\n    public static final String PRODUCT_COL_8 = \"VENDOR_ID\";\r\n    public static final String PRODUCT_COL_9 = \"CATEG_ID\";\r\n\r\n    public static final String CART_COL_1 = \"CARTID\";\r\n    public static final String CART_COL_2 = \"PROD_NAME\";\r\n    public static final String CART_COL_3 = \"PROD_QUANT\";\r\n    public static final String CART_COL_4 = \"PROD_PRICE\";\r\n    public static final String CART_COL_5 = \"ID\";\r\n    public static final String CART_COL_6 = \"PROD_ID\";\r\n\r\n    public static final String VENDOR_COL_1 = \"VENDORID\";\r\n    public static final String VENDOR_COL_2 = \"VENDORNAME\";\r\n    public static final String VENDOR_COL_3 = \"VENDOREMAIL\";\r\n    public static final String VENDOR_COL_4 = \"VENDORPASS\";\r\n\r\n    public static final String ORDER_COL_1 = \"ORDERID\";\r\n    public static final String ORDER_COL_2 = \"ID\";\r\n    public static final String ORDER_COL_3 = \"ORDER_NAME\";\r\n    public static final String ORDER_COL_4 = \"ORDER_QUANT\";\r\n    public static final String ORDER_COL_5 = \"ORDER_AMOUNT\";\r\n    public static final String ORDER_COL_6 = \"ORDER_DATE\";\r\n    public static final String ORDER_COL_7 = \"ACTIVE\";\r\n    public static final String ORDER_COL_8 = \"COUNT\";\r\n\r\n    public static final String CATEGORY_COL_1 = \"CATEG_ID\";\r\n    public static final String CATEGORY_COL_2 = \"CATEG_NAME\";\r\n\r\n\r\n    public DatabaseHelper(Context context) {\r\n        super(context, DATABASE_NAME , null, 1);\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n    }\r\n\r\n    @Override\r\n    public void onCreate(SQLiteDatabase db) {\r\n        db.execSQL(\"create table \" + ACCOUNT_TABLE_NAME + \"(ID TEXT PRIMARY KEY, EMAIL TEXT, FIRSTNAME TEXT, MIDDLENAME TEXT, SURNAME TEXT, PASSWORD TEXT)\");\r\n        db.execSQL(\"create table \" + PRODUCT_TABLE_NAME + \"(PROD_ID INTEGER PRIMARY KEY AUTOINCREMENT, PROD_NAME TEXT, PROD_DESC TEXT, PROD_PRICE DOUBLE, PROD_STOCK INTEGER, PROD_IMG TEXT, VENDOR_ID INTEGER, CATEG_ID INTEGER, FOREIGN KEY (VENDOR_ID) REFERENCES product_table (VENDOR_ID), FOREIGN KEY (CATEG_ID) REFERENCES product_table (CATEG_ID))\");\r\n        db.execSQL(\"create table  \" + CART_TABLE_NAME +  \"(CARTID INTEGER PRIMARY KEY AUTOINCREMENT, PROD_NAME TEXT, PROD_QUANT INTEGER, PROD_PRICE DOUBLE, ID TEXT, PROD_ID TEXT, FOREIGN KEY (ID) REFERENCES cart_table (ID), FOREIGN KEY (PROD_ID) REFERENCES cart_table (PROD_ID))\");\r\n        db.execSQL(\"create table \" + VENDOR_TABLE_NAME + \"(VENDORID TEXT PRIMARY KEY, VENDORNAME TEXT, VENDOREMAIL TEXT, VENDORPASS TEXT)\");\r\n        db.execSQL(\"create table \" + ORDER_TABLE_NAME + \"(ORDERID INTEGER PRIMARY KEY AUTOINCREMENT, ORDER_NAME TEXT, ORDER_QUANT INTEGER, ORDER_AMOUNT DOUBLE, ORDER_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL, ACTIVE BOOLEAN, COUNT INTEGER, ID TEXT, FOREIGN KEY (ID) REFERENCES order_table (ID))\");\r\n        db.execSQL(\"create table \" + CATEGORY_TABLE_NAME + \"(CATEG_ID INTEGER PRIMARY KEY AUTOINCREMENT, CATEG_NAME TEXT)\");\r\n    }\r\n\r\n    @Override\r\n    public void onUpgrade(SQLiteDatabase db, int i, int i1) {\r\n        db.execSQL(\" DROP TABLE IF EXISTS \"+ACCOUNT_TABLE_NAME);\r\n        db.execSQL(\" DROP TABLE IF EXISTS \"+CART_TABLE_NAME);\r\n        db.execSQL(\" DROP TABLE IF EXISTS \"+VENDOR_TABLE_NAME);\r\n        db.execSQL(\" DROP TABLE IF EXISTS \"+ORDER_TABLE_NAME);\r\n        db.execSQL(\" DROP TABLE IF EXISTS \"+PRODUCT_TABLE_NAME);\r\n        db.execSQL(\" DROP TABLE IF EXISTS \"+CATEGORY_TABLE_NAME);\r\n        onCreate(db);\r\n    }\r\n\r\n    public boolean addUser(String id, String email, String fn, String mn, String ln, String p){\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        ContentValues cv = new ContentValues();\r\n        cv.put(ACCOUNT_COL_1,id);\r\n        cv.put(ACCOUNT_COL_2,email);\r\n        cv.put(ACCOUNT_COL_3,fn);\r\n        cv.put(ACCOUNT_COL_4,mn);\r\n        cv.put(ACCOUNT_COL_5,ln);\r\n        cv.put(ACCOUNT_COL_6,p);\r\n        long result = db.insert(ACCOUNT_TABLE_NAME,null,cv);\r\n        if(result == -1)\r\n            return false;\r\n        else\r\n            return true;\r\n    }\r\n    public boolean checkUser(String id,String pass){\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        Cursor c = db.rawQuery(\"SELECT * from account_table where ID = ? and PASSWORD = ?\", new String[]{id,pass});\r\n        if (c.getCount()>0)\r\n            return true;\r\n        return false;\r\n    }\r\n    public boolean checkVendor(String id, String pass){\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        Cursor c = db.rawQuery(\"SELECT * from vendor_table where VENDORID = ? and VENDORPASS = ?\", new String[]{id,pass});\r\n        if (c.getCount()>0)\r\n            return true;\r\n        return false;\r\n    }\r\n\r\n    public VendorInfo readVendor (String id){\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        VendorInfo v = null;\r\n        String where = \"VENDORID = '\"+id+\"'\";\r\n        Cursor cursor = db.query(VENDOR_TABLE_NAME,null,where,null,null,null,null);\r\n\r\n        if(cursor.moveToNext()){\r\n            v = new VendorInfo();\r\n            v.setId(cursor.getString(0));\r\n            v.setName(cursor.getString(1));\r\n            v.setEmail(cursor.getString(2));\r\n            v.setP(cursor.getString(3));\r\n        }\r\n        return v;\r\n    }\r\n    public AccountInfo readUser (String idnum){\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        AccountInfo a = null;\r\n        String where = \"ID = '\"+idnum+\"'\";\r\n        Cursor cursor = db.query(ACCOUNT_TABLE_NAME,null,where,null,null,null,null);\r\n\r\n        if(cursor.moveToNext()){\r\n            a = new AccountInfo();\r\n            a.setId(cursor.getString(0));\r\n            a.setEmail(cursor.getString(1));\r\n            a.setFn(cursor.getString(2));\r\n            a.setMn(cursor.getString(3));\r\n            a.setLn(cursor.getString(4));\r\n            a.setP(cursor.getString(5));\r\n        }\r\n        return a;\r\n\r\n    }\r\n\r\n    public boolean updateUser(String id,String email, String fn, String mn, String ln ){\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n\r\n        ContentValues cv = new ContentValues();\r\n        cv.put(ACCOUNT_COL_2,email);\r\n        cv.put(ACCOUNT_COL_3,fn);\r\n        cv.put(ACCOUNT_COL_4,mn);\r\n        cv.put(ACCOUNT_COL_5,ln);\r\n        Cursor cursor = db.rawQuery(\"select * from account_table where ID = ?\",new String[]{id});\r\n        if(cursor.getCount()>0) {\r\n            long result = db.update(\"account_table\", cv, \"ID = ?\", new String[]{id});\r\n            if (result==-1)\r\n                return false;\r\n            else\r\n                return true;\r\n        }else\r\n            return false;\r\n\r\n    }\r\n\r\n    //--------cart_fragment------------//\r\n    public boolean addToCart(int prodId, int prodQty,String user){\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        SQLiteDatabase db2 = this.getReadableDatabase();\r\n        ContentValues contentValues = new ContentValues();\r\n\r\n        String query = \"SELECT PROD_NAME, PROD_PRICE from products_table where PROD_ID =\" + prodId;\r\n        Cursor c = db.rawQuery(query, null);\r\n\r\n        while (c.moveToNext()){\r\n            contentValues.put(CART_COL_2, c.getString(0));\r\n            contentValues.put(CART_COL_4, c.getString(1));\r\n        }\r\n\r\n        contentValues.put(CART_COL_3, prodQty);\r\n        contentValues.put(CART_COL_5, user);\r\n        contentValues.put(CART_COL_6, prodId);\r\n\r\n        long result = db.insert(CART_TABLE_NAME, null, contentValues);\r\n        db.close();\r\n        //if date as inserted incorrectly it will return -1\r\n        if (result == -1) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n    public int checkOrderQuantity(int prodId, String userid){\r\n        SQLiteDatabase db = this.getReadableDatabase();\r\n        String query = \"select PROD_QUANT from cart_table where \" + CART_COL_6 +\" = \" + prodId + \" AND \" + CART_COL_5 + \"= '\"+userid+\"'\";\r\n        Cursor c = db.rawQuery(query, null);\r\n        c.moveToFirst();\r\n        int quant = 0;\r\n        do {\r\n            if(c.getCount()!=0) {\r\n                quant = c.getInt(0);\r\n                return quant;\r\n            }\r\n            else {\r\n                return 0;\r\n            }\r\n        }while(c.moveToNext());\r\n    }\r\n    public boolean updateOrder(String userid, int prodid, int quantity) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        ContentValues contentValues = new ContentValues();\r\n        contentValues.put(CART_COL_3, quantity);\r\n\r\n        return db.update(CART_TABLE_NAME, contentValues, ACCOUNT_COL_1 + \"= '\"+userid+\"'\" + \" AND \" + CART_COL_6 + \"=\" + prodid, null)>0;\r\n    }\r\n    public boolean deleteCartEntry(String userid, String ordername) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        boolean result = false;\r\n        String query = \"Select * from cart_table where ID =\" + \"'\" + userid + \"'\";\r\n        Cursor cursor = db.rawQuery(query, null);\r\n        if (cursor.moveToFirst()) {\r\n            cursor.getString(0);\r\n            db.delete(\"cart_table\", \"PROD_NAME = ?\", new String[]{ordername});\r\n            cursor.close();\r\n            result = true;\r\n        }\r\n        db.close();\r\n        return result;\r\n    }\r\n    public boolean deleteCart(String userid) {\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        boolean result = false;\r\n        String query = \"Select * from cart_table where ID =\" + \"'\" + userid + \"'\";\r\n\r\n        Cursor cursor = db.rawQuery(query, null);\r\n        if (cursor.moveToFirst()) {\r\n            db.delete(\"cart_table\", \"ID = ?\", new String[]{userid});\r\n            cursor.close();\r\n            result = true;\r\n        }\r\n        db.close();\r\n        return result;\r\n    }\r\n    //----------------------------------//\r\n\r\n    public boolean checkId(String id){\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        Cursor c = db.rawQuery(\"SELECT * from account_table where ID = ?\", new String[]{id});\r\n        if (c.getCount()>0)\r\n            return true;\r\n        return false;\r\n    }\r\n    public boolean updatePassword(String pass , String id){\r\n        SQLiteDatabase db= this.getWritableDatabase();\r\n        ContentValues contentValues = new ContentValues();\r\n        contentValues.put(ACCOUNT_COL_6, pass);\r\n        long result = db.update(\"account_table\", contentValues, \"ID = ?\", new String[]{id});\r\n        if(result == -1) return false;\r\n        else\r\n            return true;\r\n    }\r\n    public boolean updatePW(String pass, String id ){\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n\r\n        ContentValues cv = new ContentValues();\r\n        cv.put(ACCOUNT_COL_6,pass);\r\n        Cursor cursor = db.rawQuery(\"select * from account_table where ID = ?\",new String[]{id});\r\n        if(cursor.getCount()>0) {\r\n            long result = db.update(\"account_table\", cv, \"ID = ?\", new String[]{id});\r\n            if (result==-1)\r\n                return false;\r\n            else\r\n                return true;\r\n        }else\r\n            return false;\r\n\r\n    }\r\n    public boolean deleteUser(String id){\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        return db.delete(\"account_table\", \"ID = ?\", new String[]{id})>0;\r\n    }\r\n\r\n//    int order_id, String id, String order_name, String order_quant, Double order_amount\r\n    public boolean placeOrder(String id){\r\n        String name = \"\";\r\n        Integer quantity = 0;\r\n        Double amount = 0.0;\r\n        int ctr=0;\r\n        boolean active = true;\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        SQLiteDatabase db2 = this.getReadableDatabase();\r\n        int count = 0;\r\n\r\n        Cursor c = db2.rawQuery(\"SELECT MAX(count) from order_table\", null);\r\n\r\n        while(c.moveToNext()){\r\n            if(c != null){\r\n                count = c.getInt(0);\r\n            }\r\n            else{\r\n                count=1;\r\n                break;\r\n            }\r\n        }\r\n        count++;\r\n\r\n        ArrayList<String> orderList;\r\n        ArrayList<Double> priceList;\r\n        ArrayList<Integer> quantityList;\r\n\r\n        orderList = checkCartList(id);\r\n        quantityList = checkCartQuantity(id);\r\n        priceList = checkPrice(id);\r\n\r\n        ContentValues cv = new ContentValues();\r\n\r\n        for (ctr=0;ctr<orderList.size();ctr++) {\r\n            name = orderList.get(ctr);\r\n            quantity = quantityList.get(ctr);\r\n            amount = priceList.get(ctr);\r\n            cv.put(ORDER_COL_2, id);\r\n            cv.put(ORDER_COL_3, name);\r\n            cv.put(ORDER_COL_4, quantity);\r\n            cv.put(ORDER_COL_5, amount);\r\n            cv.put(ORDER_COL_7, active);\r\n            cv.put(ORDER_COL_8, count);\r\n\r\n            long result = db.insert(ORDER_TABLE_NAME, null, cv);\r\n            if (result == -1)\r\n                return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    //order_fragment\r\n    public ArrayList<String> checkOrderList(String userid){\r\n        ArrayList<String> data=new ArrayList();\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        Cursor c = db.rawQuery(\"select ORDER_NAME from order_table where ID = ?\", new String[]{userid});\r\n        String fieldToAdd;\r\n        while(c.moveToNext()){\r\n            fieldToAdd = c.getString(0);\r\n            data.add(fieldToAdd);\r\n        }\r\n        c.close();\r\n        return data;\r\n    }\r\n    public ArrayList<Integer> checkOrderQuantity(String userid){\r\n        ArrayList<Integer> data = new ArrayList();\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        Cursor c = db.rawQuery(\"select ORDER_QUANT from order_table where ID = ?\", new String[]{userid});\r\n        Integer fieldToAdd=null;\r\n        while(c.moveToNext()){\r\n            fieldToAdd = c.getInt(0);\r\n            data.add(fieldToAdd);\r\n        }\r\n        c.close();\r\n        return data;\r\n    }\r\n    public ArrayList<Double> checkOrderAmount(String userid){\r\n        ArrayList<Double> data=new ArrayList();\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        Cursor c = db.rawQuery(\"SELECT ORDER_AMOUNT from order_table where ID = ?\", new String[]{userid});\r\n        Double fieldToAdd=null;\r\n        while(c.moveToNext()){\r\n            fieldToAdd = c.getDouble(0);\r\n            data.add(fieldToAdd);\r\n        }\r\n        c.close();\r\n        return data;\r\n    }\r\n    public ArrayList<String> checkOrderDate(String userid){\r\n        Date date=Calendar.getInstance().getTime();\r\n        ArrayList<String> data=new ArrayList();\r\n        DateFormat formatDate = new SimpleDateFormat(\"dd/MM/yyyy\");\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        Cursor c = db.rawQuery(\"SELECT CURRENT_TIMESTAMP 'ORDER_DATE', CAST(CURRENT_TIMESTAMP AS VARCHAR) from order_table where ID = ?\", new String[]{userid});\r\n        String fieldToAdd=null;\r\n        while(c.moveToNext()){\r\n            fieldToAdd = c.getString(0);\r\n            try {\r\n                date = new SimpleDateFormat(\"dd/MM/yyyy\").parse(fieldToAdd);\r\n            } catch (ParseException e) {\r\n                e.printStackTrace();\r\n            }\r\n            String formattedDateStr = formatDate.format(date);\r\n            data.add(formattedDateStr);\r\n        }\r\n        c.close();\r\n        return data;\r\n    }\r\n\r\n    //products_table\r\n    public ArrayList<Integer> checkProdIDList(){\r\n        ArrayList<Integer> data=new ArrayList();\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        Cursor c = db.rawQuery(\"select PROD_ID from products_table\", null);\r\n        Integer fieldToAdd;\r\n        while(c.moveToNext()){\r\n            fieldToAdd = c.getInt(0);\r\n            data.add(fieldToAdd);\r\n        }\r\n        c.close();\r\n        return data;\r\n    }\r\n    public ArrayList<String> checkProdNameList(){\r\n        ArrayList<String> data=new ArrayList();\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        Cursor c = db.rawQuery(\"select PROD_NAME from products_table\", null);\r\n        String fieldToAdd;\r\n        while(c.moveToNext()){\r\n            fieldToAdd = c.getString(0);\r\n            data.add(fieldToAdd);\r\n        }\r\n        c.close();\r\n        return data;\r\n    }\r\n    public ArrayList<Double> checkProdPriceList(){\r\n        ArrayList<Double> data=new ArrayList();\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        Cursor c = db.rawQuery(\"select PROD_PRICE from products_table\", null);\r\n        Double fieldToAdd=null;\r\n        while(c.moveToNext()){\r\n            fieldToAdd = c.getDouble(0);\r\n            data.add(fieldToAdd);\r\n        }\r\n        c.close();\r\n        return data;\r\n    }\r\n    public ArrayList<String> checkProdImgURIList(){\r\n        ArrayList<String> data=new ArrayList();\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        Cursor c = db.rawQuery(\"select PROD_IMG from products_table\", null);\r\n        String fieldToAdd;\r\n        while(c.moveToNext()){\r\n            fieldToAdd = c.getString(0);\r\n            if(!data.contains(fieldToAdd))\r\n                data.add(fieldToAdd);\r\n        }\r\n        c.close();\r\n        return data;\r\n    }\r\n\r\n    //product details view\r\n\r\n    //cart_table\r\n    public ArrayList<String> checkCartList(String userid){\r\n        ArrayList<String> data=new ArrayList();\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        Cursor c = db.rawQuery(\"select PROD_NAME from cart_table where ID = ?\", new String[]{userid});\r\n        String fieldToAdd;\r\n        while(c.moveToNext()){\r\n            fieldToAdd = c.getString(0);\r\n            data.add(fieldToAdd);\r\n        }\r\n        c.close();\r\n        return data;\r\n    }\r\n    public ArrayList<Integer> checkCartQuantity(String userid){\r\n        ArrayList<Integer> data = new ArrayList();\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        Cursor c = db.rawQuery(\"select PROD_QUANT from cart_table where ID = ?\", new String[]{userid});\r\n        Integer fieldToAdd=null;\r\n        while(c.moveToNext()){\r\n            fieldToAdd = c.getInt(0);\r\n            data.add(fieldToAdd);\r\n        }\r\n        c.close();\r\n        return data;\r\n    }\r\n    public ArrayList<Double> checkPrice(String userid){\r\n        ArrayList<Double> data=new ArrayList();\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        Cursor c = db.rawQuery(\"SELECT PROD_PRICE from cart_table where ID = ?\", new String[]{userid});\r\n        Double fieldToAdd=null;\r\n        while(c.moveToNext()){\r\n            fieldToAdd = c.getDouble(0);\r\n            data.add(fieldToAdd);\r\n        }\r\n        c.close();\r\n        return data;\r\n    }\r\n\r\n    //vendor_OrdersFragment\r\n    public ArrayList<String> checkActiveOrders(String userid){\r\n        ArrayList<String> data=new ArrayList<String>();\r\n        SQLiteDatabase db = this.getWritableDatabase();\r\n        Cursor c = db.rawQuery(\"select count from order_table where active = true and id = ?\", new String[]{userid});\r\n        String fieldToAdd;\r\n        while(c.moveToNext()){\r\n            fieldToAdd = c.getString(0);\r\n            data.add(fieldToAdd);\r\n        }\r\n        c.close();\r\n        return data;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/gittest/DatabaseHelper.java b/app/src/main/java/com/example/gittest/DatabaseHelper.java
--- a/app/src/main/java/com/example/gittest/DatabaseHelper.java	(revision fca3d90c6dbe8c05d78892649db8035fafc35a9a)
+++ b/app/src/main/java/com/example/gittest/DatabaseHelper.java	(date 1639454828377)
@@ -455,7 +455,7 @@
     }
 
     //product details view
-
+    
     //cart_table
     public ArrayList<String> checkCartList(String userid){
         ArrayList<String> data=new ArrayList();
